AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: S3 WhatsApp Notifier - Sends WhatsApp messages when files are uploaded to S3

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - staging
      - prod
    Description: Environment type

  TwilioAccountSid:
    Type: String
    Description: Twilio Account SID
    NoEcho: true

  TwilioAuthToken:
    Type: String
    Description: Twilio Auth Token
    NoEcho: true

  WhatsAppFrom:
    Type: String
    Description: Twilio WhatsApp From number (format: whatsapp:+14155238886)
    NoEcho: true

  WhatsAppTo:
    Type: String
    Description: Target WhatsApp number (format: whatsapp:+1234567890)
    NoEcho: true

Globals:
  Function:
    Runtime: nodejs18.x
    Timeout: 30
    MemorySize: 256
    Environment:
      Variables:
        NODE_ENV: !Ref Environment

Resources:
  # S3 Bucket for file uploads
  UploadBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::StackName}-uploads-${Environment}'
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
    DeletionPolicy: Retain

  # Lambda Function
  NotifierFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-${Environment}'
      CodeUri: dist/
      Handler: index.handler
      Description: Function to send WhatsApp notifications for S3 uploads
      Environment:
        Variables:
          TWILIO_ACCOUNT_SID: !Ref TwilioAccountSid
          TWILIO_AUTH_TOKEN: !Ref TwilioAuthToken
          TWILIO_WHATSAPP_FROM: !Ref WhatsAppFrom
          WHATSAPP_TO: !Ref WhatsAppTo
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref UploadBucket
        - CloudWatchLogsFullAccess
      Events:
        S3Upload:
          Type: S3
          Properties:
            Bucket: !Ref UploadBucket
            Events: 's3:ObjectCreated:*'

  # CloudWatch Log Group
  NotifierLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${NotifierFunction}'
      RetentionInDays: 30

  # Lambda Execution Role
  NotifierRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub 'arn:aws:s3:::${UploadBucket}'
                  - !Sub 'arn:aws:s3:::${UploadBucket}/*'

# CloudWatch Alarms
  ErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alert when errors occur in the Lambda function
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref NotifierFunction
      TreatMissingData: notBreaching

Outputs:
  UploadBucketName:
    Description: Name of the S3 bucket for uploads
    Value: !Ref UploadBucket
    Export:
      Name: !Sub '${AWS::StackName}-bucket-name'

  UploadBucketArn:
    Description: ARN of the S3 bucket
    Value: !GetAtt UploadBucket.Arn
    Export:
      Name: !Sub '${AWS::StackName}-bucket-arn'

  NotifierFunctionArn:
    Description: ARN of the Lambda function
    Value: !GetAtt NotifierFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-function-arn'

  NotifierFunctionName:
    Description: Name of the Lambda function
    Value: !Ref NotifierFunction
    Export:
      Name: !Sub '${AWS::StackName}-function-name'